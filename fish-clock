#!/usr/bin/env perl

use 5.18.0;

=head

Forked as late as possible, unless -f is given.
Then, clock thread is detached.

=cut

package main;

my $top_dir;
my $script_name;
my $libmain_dir;
my $libfish_dir;

BEGIN {
    my $BIN_NAME = 'fish-clock';

    use File::Basename;
    use Cwd 'realpath';

    $script_name = basename $0;
    $top_dir = dirname realpath $0;

    $libmain_dir = $top_dir . '/libmain';
    $libfish_dir = $top_dir . '/libextra/fish-lib-perl';
    unshift @INC, $_ for $libmain_dir, $libfish_dir;

    unshift @INC, $libmain_dir . '/fish_clock_xs/lib';
    my @blib = qw,
        fish_clock_xs/blib/lib/auto/fish_clock_xs
        fish_clock_xs/blib/arch/auto/fish_clock_xs
    ,;
    unshift @INC, "$libmain_dir/$_" for @blib;

    $0 = $BIN_NAME;
}

use threads;
use threads::shared;

$SIG{INT} = $SIG{TERM} = $SIG{KILL} = sub { exit };

use Glib;

use Time::HiRes qw, time sleep ,;
use List::Util 'max';
use POSIX 'setuid';

use constant BENCHMARK => 0;

# Allow being called from outside with -Mconstant=DEBUG,1
# and if that's not there, compile away DEBUG blocks.
use if ! defined &DEBUG, 'constant',  DEBUG => 0;

use if DEBUG, 'Fish::Utility_m' => 'd';

sub bench_start(_)  { if (BENCHMARK) { return Fish::Clock::Utility::bench_start(@_) } }
sub bench_end(_)    { if (BENCHMARK) { return Fish::Clock::Utility::bench_end(@_) } }
sub bench_end_pr(_) { if (BENCHMARK) { return Fish::Clock::Utility::bench_end_pr(@_) } }
sub bench_pr(_)     { if (BENCHMARK) { return Fish::Clock::Utility::bench_pr(@_) } }

use Fish::Opt 'opt';
use Fish::Utility;
Fish::Utility->verbose_cmds(0);
use Fish::Utility_m qw, is_multiple ,;
use Fish::Class 'o';
use Fish::Socket::Server::unix;

use Fish::Clock::Conf 'cr';

# Old: Clock needs to be used after debug level is set (because of threads). 
# And it has to be sure that there is an X server somewhere or else libaosd splatters.
my @LATE_USE = qw,
    Fish::Clock::Clock
,;

my $opt = opt {
    h   => 'f',
    v   => 'f',
    f   => 'f',
    l   => 'f',
} or error help();

info(help()), exit if $opt->h;

Fish::Utility->info_level($opt->v ? 1 : 0);

my $HOME = $ENV{HOME};

my @REQUIRED_CONF = qw, socket-path active-ms ,;
my $MAIN_CONF = '/usr/share/fish-clock/config';
my @CONF_FILES = (
    $MAIN_CONF,
    "__HOME__/.fish-clock-config",
);

my $X_SLEEP = 1;

check_unique();

my $user = Fish::Clock::Conf->pre_init($MAIN_CONF);
my $name = change_user($user);
my $home = home($name);

s/__HOME__/$home/g for @CONF_FILES;

info('change to user:', $user) if DEBUG;
info('name', $name) if DEBUG;
info('home', $home) if DEBUG;
info('@CONF_FILES:', d(\@CONF_FILES)) if DEBUG;

Fish::Clock::Conf->init({
    required => \@REQUIRED_CONF,
    conf_files => \@CONF_FILES,
    dump        => $opt->L,
});

exit if $opt->l;

my $g = o(
    state => 0,
    clock => undef,
    cur_timeout => undef,
    socket_path => cr 'socket-path',
    socket => undef,
    am_child => 0,
    xres    => cr 'xres',
);

my $gloop = Glib::MainLoop->new;

my $sock = Fish::Socket::Server::unix->new(
    path => $g->socket_path,
    unlink => 0,
);

$g->socket($sock);
sys sprintf qq, chmod a+w "%s" ,, $g->socket_path;

my $fileno = fileno($sock->listener);
error "Invalid fileno", R $fileno if !$fileno || $fileno == -1;

Glib::IO->add_watch($fileno, 'in', sub {
    # Blocking, but we know there's something waiting.
    my $s = $sock->listen;

    if (not defined $s) {
        return 1;
    }

    chomp $s;
    $sock->say('');

    info 'Got message on socket:', $s if DEBUG;

    if ($s eq 'toggle') {
        $g->state ? hide() : show();
    }
    elsif ($s eq 'toggle-fill') {
        $g->state ? hide() : show({fill => 1});
    }
    elsif ($s eq 'show') {
        show();
    }
    elsif ($s eq 'show-fill') {
        show({fill => 1});
    }
    elsif ($s eq 'hide') {
        hide();
    }
    1;
});

if ($opt->f) {
    go();
}
else {
    info "Forking.";
    my $pid = fork // error("Couldn't fork", R $!);

    $pid ?
        exit 0 : 
        $g->am_child(1), go(); 
}

exit;

END {
    my $sock;
    if ($opt->f or ($g and $g->am_child)) {
        if ($g and $sock = $g->socket) {
            info 'Destroying socket';
            $sock->DESTROY; 
        }
    }
}

# - - -

sub go { 
    
    my $hour :shared = undef;
    my $min :shared = undef;
    my $sec :shared = undef;

    async { clock_thread(\$hour, \$min, \$sec) }->detach;

    while (! x_is_running()) {
        info "X doesn't seem to be running, sleeping $X_SLEEP";
        sleep $X_SLEEP;
    }

    use_late_modules(); # Fish::Clock::Clock

    $g->clock( Fish::Clock::Clock->new(
            hour => \$hour,
            mins => \$min,
            sec => \$sec,

            xres => $g->xres,
        )
    );

    info "Ready.";

    $gloop->run 
} 

sub timeout { shift if $_[0] eq __PACKAGE__;
    my ($ms, $sub) = @_;
    Glib::Timeout->add($ms, $sub);
}

sub remove_timeout {
    my ($id) = @_;
    Glib::Source->remove($id);
}

sub show {
    my ($opts) = @_;
    $opts //= {};
    my $fill = $opts->{fill};
    return if $g->state;

bench_start 'show';

    $g->clock->fill($fill);

    my $t1 = time;
    $g->clock->show or warn, next;
    $g->state(1);

    my $default_time = cr('active-ms');
    my $sl = max(0, $default_time - (time - $t1));
    info '$sl (timeout) was', $sl if DEBUG;

    remove_timeout $g->cur_timeout if defined $g->cur_timeout;
    $g->cur_timeout( timeout $sl, sub {
        return unless $g->state;
        info 'hiding in timeout' if DEBUG;
        hide();
        0;
    });
bench_end 'show';

bench_pr for qw, renderer-config renderer-render show 
    show-clock.1 show-clock.2 show-clock.3.1 show-clock.3.2 show-clock.4
,;
}

sub hide {
    return unless $g->state;
    info 'hiding' if DEBUG;
    $g->clock->hide or warn, next;
    $g->state(0);
}

sub help {
    return "Usage: $0 [-h] [-v for verbose] [-f to stay in foreground] [-l to dump config and quit].";
}

# Updates the global, shared variables $hour, $min, $sec.
sub clock_thread {
    my ($hourr, $minr, $secr) = @_;

    my $i = -1;
    while (1) {
        my $t1 = time;
        if (is_multiple ++$i, 60) {
            ($$hourr, $$minr, $$secr) = update_time_sys();
            $i = 0;
        }
        else {
            if (++$$secr == 60) {
                $$secr = 0;
                if (++$$minr == 60) {
                    $$minr = 0;
                    $$hourr++;
                }
            }
        }
        info 'hr', $$hourr, 'm', $$minr, 's', $$secr if DEBUG;
        my $sleep = 1 - (time - $t1);
        sleep $sleep unless $sleep <= 0;
    }
}

sub update_time_sys {
    info 'Syncing time with system.';

    my $time = sys 'date +%I:%M:%S';
    my ($hr, $m, $s) = split /:/, $time;

    (int $hr, int $m, int $s)
}

sub change_user {
    my ($u) = @_;
    my ($name, $id);
    if ($u !~ /\D/) {
        $name = getpwuid($u) // error "Can't find uid", R $u;
        $id = $u;
    }
    else {
        $id = getpwnam($u) // error "Can't find user", R $u;
        $name = $u;
    }
    setuid($id) // error sprintf "Can't change uid to %s: %s", R $id, $!;
    infof "Changed user -> %s [%s]", CY $id, G $name;
    return $name;
}

# Assumes already setuid'd
sub home {
    my ($user) = @_;
    # wrong -- can't change user
    #return $ENV{HOME} if $ENV{HOME};
    my $home_dir;
    my $found;
    while ( my ($name,$passwd,$uid,$gid, $quota,$comment,$gcos,$dir,$shell,$expire) = getpwent ) {
        if ($name eq $user) {
            $found = 1;
            $home_dir = $dir;
            last;
        }
    }
    if (!$found) {
        war "Can't find home dir for user", BR $user;
    }
    else {
        if (-d $home_dir) {
            return $home_dir;
        }
        else {
            war "Dir", BR $home_dir, "doesn't seem to be a valid home dir";
        }
    }
    return; # error
}

sub check_unique {
    # don't need pid actually, pgrp is good enough.
    # pgrp is better than pid because you can catch 
    #  /bin/sh /etc/init.d/fish-clock
    #  fish-clock
    # while looks like 2 processes.
    my @ps = sysll qq| ps -opid=,pgrp= -C $script_name |, { die => 0, killerr => 1, quiet => 1 };
    my @pids;
    my $my_pgrp = getpgrp;
    for (@ps) {
        $_ = strip;
        my ($pid, $pgrp) = split;
        push @pids, $pid if $pgrp != $my_pgrp;
    }
    my @e = map { sprintf "Another instance is already running (pid %s) ", CY $_ } @pids;
    error @e if @e;
}

sub use_late_modules {
    eval "use $_; 1" or error "Can't use", R $_, "$@" for @LATE_USE;
}

sub x_is_running {
    $ENV{DISPLAY} = ":0"; # XX
    return sys_ok qq, xset q ,, {quiet => 1, killerr => 1},;
}
