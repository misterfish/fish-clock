#!/usr/bin/env perl

# --- if -f is given, we stay in the foreground.
#
# otherwise we fork, so that 'fish-clock' from the command line goes straight to the background.
#
# in that case, we do as much prep work as possible before forking.  
#
# then, the clock thread is spawned, which has its own ticker to keep the
# time updated, and syncs with the system clock every minute by default.

use 5.18.0;

package main;

my $top_dir;
my $script_name;
my $libmain_dir;
my $libfish_dir;

BEGIN {
    my $BIN_NAME = 'fish-clock';

    use File::Basename;
    use Cwd 'realpath';

    $script_name = basename $0;
    $top_dir = dirname realpath $0;

    my $libmain_dir = $top_dir . '/libmain';

    unshift @INC, $libmain_dir;
    unshift @INC, $top_dir . '/libextra/fish-lib-perl';
    unshift @INC, $libmain_dir . '/fish_clock_xs/lib';
    unshift @INC, $libmain_dir . '/fish_clock_xs/blib/lib/auto/fish_clock_xs';
    unshift @INC, $libmain_dir . '/fish_clock_xs/blib/arch/auto/fish_clock_xs';

    $0 = $BIN_NAME;
}

use threads;
use threads::shared;

# --- force END block on Ctl-c / kill.
$SIG{INT} = $SIG{TERM} = sub { exit };

use Glib;

use Time::HiRes qw, time sleep ,;
use List::Util 'max';
use POSIX 'setuid';

use constant BENCHMARK => 0;

# --- compile away DEBUG blocks unless we're not invoked with
# -Mconstant=DEBUG,1
#
# just like 'use constant DEBUG => 0' but conditional.

use if ! defined &DEBUG, 'constant',  DEBUG => 0;

use if DEBUG, 'Fish::Utility_m' => 'd';

sub forkk;

sub bench_start(_)  { if (BENCHMARK) { return Fish::Clock::Utility::bench_start(@_) } }
sub bench_end(_)    { if (BENCHMARK) { return Fish::Clock::Utility::bench_end(@_) } }
sub bench_end_pr(_) { if (BENCHMARK) { return Fish::Clock::Utility::bench_end_pr(@_) } }
sub bench_pr(_)     { if (BENCHMARK) { return Fish::Clock::Utility::bench_pr(@_) } }

sub cr_list(_);
sub cr(_);
sub c(_);

use Fish::Opt 'opt';
use Fish::Utility;
Fish::Utility->verbose_cmds(0);
use Fish::Utility_l 'list';
use Fish::Utility_m 'is_multiple';
use Fish::Class 'o';
use Fish::Socket::Server::unix;

use Fish::Conf;

my $config = o(
    # --- modules to require later (at runtime).
    #
    # Fish::Clock::Clock is here because we have to be sure that there is an
    # X server somewhere (or else libaosd splatters).

    late_use => [
        'Fish::Clock::Clock',
    ],

    conf_required => [
        'socket-path',
        'xres',
        'active-ms',
        #XXX
    ],

    conf_file_default => "$ENV{HOME}/.fish-clock-config",

    x_sleep => 1,
);

my $opt = opt {
    h   => 'f',
    v   => 'f',
    f   => 'f',
    l   => 'f',
    c   => 's',
} or error usage();

info(usage()),
    exit if $opt->h;

Fish::Utility->info_level($opt->v ? 1 : 0);

# --- die if there are other instances running.
check_unique();

exit if $opt->l;

my $g = o(
    state => 0,
    clock => undef,
    conf_file => $opt->c // $config->conf_file_default,
    conf => undef,
    cur_timeout => undef,
    socket_path => undef,
    socket => undef,
    am_child => 0,
    xres    => undef,
    gloop   => Glib::MainLoop->new,
);

$g->conf(init_conf());
$g->socket_path(cr 'socket-path');
$g->xres(cr 'xres');
$g->socket(make_socket());

add_socket_listener() or
    error "Couldn't add socket listener.";

add_config_timeout(1000);

go(),
    exit if $opt->f;

info "Forking.";

# --- fork and kill parent.
exit 0 if forkk;

$g->am_child(1);

go(); 
exit;

END {
    cleanup_socket();
}


# - - -

sub go { 
    
    # --- these are shared with the clock thread, and are also passed to the
    # constructor of the Clock.
    my $hour :shared = undef;
    my $min :shared = undef;
    my $sec :shared = undef;

    async { clock_thread(\$hour, \$min, \$sec) }->detach;

=head
    while (not x_is_running()) {
        my $xs = $config->x_sleep;
        info "X doesn't seem to be running, sleeping", Y $xs;
        sleep $xs;
    }
=cut

    use_late_modules(); # Fish::Clock::Clock

    $g->clock( Fish::Clock::Clock->new(
            hour => \$hour,
            mins => \$min,
            sec => \$sec,

            xres => $g->xres,
        )
    );

    info "Ready.";

    # --- enter glib main loop.
    $g->gloop->run;
} 

sub timeout { shift if $_[0] eq __PACKAGE__;
    my ($ms, $sub) = @_;
    Glib::Timeout->add($ms, $sub) or iwar "Couldn't add glib timeout";
}

sub remove_timeout {
    my ($id) = @_;

    # --- don't complain if timeout has already disappeared (temporarily
    # disable warnings).
    local ($^W) = 0;

    Glib::Source->remove($id);
}

sub show {
    my ($opts) = @_;
    $opts //= {};
    my $fill = $opts->{fill};
    return if $g->state;

    $g->clock->fill($fill);

    my $t1 = time;
    $g->clock->show or
        iwar, next;
    $g->state(1);

    my $default_time = cr 'active-ms';
    my $sl = max(0, $default_time - (time - $t1));
    info '$sl (timeout) was', $sl if DEBUG;

    remove_timeout $g->cur_timeout if defined $g->cur_timeout;
    $g->cur_timeout( timeout $sl, sub {
        return unless $g->state;
        info 'hiding in timeout' if DEBUG;
        hide();
        $g->cur_timeout(undef);

        0
    });
}

sub hide {
    return unless $g->state;
    info 'hiding' if DEBUG;
    $g->clock->hide or warn, next;
    $g->state(0);
}

sub usage {
    sprintf "Usage: $0 [-h] [-v for verbose] [-c conf-file, defaults to %s] [-f to stay in foreground] [-l to dump config and quit].", Y $config->conf_file_default
}

# --- updates the global, shared variables $hour, $min, $sec.
sub clock_thread {

    my $SYNC_SECS = 10;

    my ($hourr, $minr, $secr) = @_;

    my $i = -1;
    while (1) {
        my $t1 = time;
        if (is_multiple ++$i, 10) {
            ($$hourr, $$minr, $$secr) = update_time_sys();
            $i = 0;
        }
        else {
            if (++$$secr == 60) {
                $$secr = 0;
                if (++$$minr == 60) {
                    $$minr = 0;
                    $$hourr++;
                }
            }
        }
        info 'hr', $$hourr, 'm', $$minr, 's', $$secr if DEBUG;

        # --- sleep the remainder of 1 second.
        my $sleep = 1 - (time - $t1);
        sleep $sleep unless $sleep <= 0;
    }
}

sub update_time_sys {
    info 'Syncing time with system.';

    my $time = sys 'date +%I:%M:%S';
    my ($hr, $m, $s) = split ':', $time;

    int $hr, int $m, int $s
}

sub make_socket {
    my $socket = Fish::Socket::Server::unix->new(
        path => $g->socket_path,
        unlink => 0,
    );

    # --- we don't provide any security on the socket.
    sys sprintf qq, chmod a+w "%s" ,, $g->socket_path;

    $socket
}

sub add_socket_listener {
    my $socket = $g->socket;
    my $fileno = fileno($socket->listener);
    return war "Invalid fileno", R $fileno if not $fileno or $fileno == -1;

    Glib::IO->add_watch($fileno, 'in', sub {
        # --- blocking, but we know there's something waiting.
        my $s = $socket->listen;

        return 1 unless defined $s;

        chomp $s;
        $socket->say('');

        info 'Got message on socket:', $s if DEBUG;

        # --- socket commands.
        if ($s eq 'toggle') {
            $g->state ? hide() : show();
        }
        elsif ($s eq 'toggle-fill') {
            $g->state ? hide() : show({fill => 1});
        }
        elsif ($s eq 'show') {
            show();
        }
        elsif ($s eq 'show-fill') {
            show({fill => 1});
        }
        elsif ($s eq 'hide') {
            hide();
        }
        1;
    })
}

# --- check the timestamps on the config file(s) every second or so and
# reload if changed.
#
# this is in the end much less complicated than putting an IO watch on them.
sub add_config_timeout {
    my ($time) = @_;
    Glib::Timeout->add($time, sub {
        $g->conf->update_config;

        1
    });
}

sub check_unique {
    # --- pgrp is better than pid because you can catch e.g.:
    #  -> /bin/sh /etc/init.d/fish-clock
    #  -> fish-clock
    # which otherwise looks like 2 processes.
    my @ps = sysll qq| ps -opid=,pgrp= -C $script_name |, { die => 0, killerr => 1, quiet => 1, };
    my @pids;
    my $my_pgrp = getpgrp;
    for (@ps) {
        $_ = strip;
        my ($pid, $pgrp) = split;
        push @pids, $pid if $pgrp != $my_pgrp;
    }
    my @e = map { sprintf "Another instance is already running (pid %s) ", CY $_ } @pids;
    error @e if @e;
}

# --- dies.
sub use_late_modules {
    eval "use $_; 1" or error "Can't use", R $_, "$@" for list $config->late_use;
}

=head
sub x_is_running {
    $ENV{DISPLAY} = ":0"; # XX
    return sys_ok qq, xset q ,, {quiet => 1, killerr => 1},;
}
=cut

# --- fork, dying if the system call fails.
sub forkk {
    my $pid = fork // error "Couldn't fork", R $!;

    $pid
}

# --- called from END -- $opt and $g are not guaranteed to exist.
sub cleanup_socket {
    my $sock;
    if (($opt and $opt->f) or ($g and $g->am_child)) {
        if ($g and $sock = $g->socket) {
            info 'Destroying socket';
            $sock->DESTROY; 
        }
    }
}

sub init_conf {
    my $c = Fish::Conf->new(
        default_block => 'fish-clock',
        conf_required => $config->conf_required,
        conf_files => [$g->conf_file],
    );

    $c
}

sub cr_list(_) { $g->conf->cr_list(shift) }
sub cr(_) { $g->conf->cr(shift) }
sub c(_) { $g->conf->c(shift) }
